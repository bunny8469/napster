// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: napster.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerId        string                 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	FileNames     []string               `protobuf:"bytes,2,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
	PeerAddress   string                 `protobuf:"bytes,3,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	FilePaths     []string               `protobuf:"bytes,4,rep,name=FilePaths,proto3" json:"FilePaths,omitempty"` // Updated: Now sends file paths, not chunk IDs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_napster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_napster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_napster_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *RegisterRequest) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

func (x *RegisterRequest) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

func (x *RegisterRequest) GetFilePaths() []string {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_napster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_napster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_napster_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SearchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	ChunkID       string                 `protobuf:"bytes,2,opt,name=ChunkID,proto3" json:"ChunkID,omitempty"` // Add this
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_napster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_napster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_napster_proto_rawDescGZIP(), []int{2}
}

func (x *SearchRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SearchRequest) GetChunkID() string {
	if x != nil {
		return x.ChunkID
	}
	return ""
}

type SearchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerAddresses []string               `protobuf:"bytes,1,rep,name=peer_addresses,json=peerAddresses,proto3" json:"peer_addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_napster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_napster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_napster_proto_rawDescGZIP(), []int{3}
}

func (x *SearchResponse) GetPeerAddresses() []string {
	if x != nil {
		return x.PeerAddresses
	}
	return nil
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_napster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_napster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_napster_proto_rawDescGZIP(), []int{4}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Alive         bool                   `protobuf:"varint,1,opt,name=alive,proto3" json:"alive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_napster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_napster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_napster_proto_rawDescGZIP(), []int{5}
}

func (x *HealthCheckResponse) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

type FileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	PeerAddress   string                 `protobuf:"bytes,2,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	mi := &file_napster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_napster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_napster_proto_rawDescGZIP(), []int{6}
}

func (x *FileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileRequest) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

type FileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileData      []byte                 `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	mi := &file_napster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_napster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_napster_proto_rawDescGZIP(), []int{7}
}

func (x *FileResponse) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

var File_napster_proto protoreflect.FileDescriptor

const file_napster_proto_rawDesc = "" +
	"\n" +
	"\rnapster.proto\x12\anapster\"\x8a\x01\n" +
	"\x0fRegisterRequest\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\tR\x06peerId\x12\x1d\n" +
	"\n" +
	"file_names\x18\x02 \x03(\tR\tfileNames\x12!\n" +
	"\fpeer_address\x18\x03 \x01(\tR\vpeerAddress\x12\x1c\n" +
	"\tFilePaths\x18\x04 \x03(\tR\tFilePaths\"F\n" +
	"\x10RegisterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"F\n" +
	"\rSearchRequest\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\x12\x18\n" +
	"\aChunkID\x18\x02 \x01(\tR\aChunkID\"7\n" +
	"\x0eSearchResponse\x12%\n" +
	"\x0epeer_addresses\x18\x01 \x03(\tR\rpeerAddresses\"\x14\n" +
	"\x12HealthCheckRequest\"+\n" +
	"\x13HealthCheckResponse\x12\x14\n" +
	"\x05alive\x18\x01 \x01(\bR\x05alive\"M\n" +
	"\vFileRequest\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\x12!\n" +
	"\fpeer_address\x18\x02 \x01(\tR\vpeerAddress\"+\n" +
	"\fFileResponse\x12\x1b\n" +
	"\tfile_data\x18\x01 \x01(\fR\bfileData2\xdd\x01\n" +
	"\rCentralServer\x12C\n" +
	"\fRegisterPeer\x12\x18.napster.RegisterRequest\x1a\x19.napster.RegisterResponse\x12=\n" +
	"\n" +
	"SearchFile\x12\x16.napster.SearchRequest\x1a\x17.napster.SearchResponse\x12H\n" +
	"\vHealthCheck\x12\x1b.napster.HealthCheckRequest\x1a\x1c.napster.HealthCheckResponse2\x93\x01\n" +
	"\vPeerService\x12:\n" +
	"\vRequestFile\x12\x14.napster.FileRequest\x1a\x15.napster.FileResponse\x12H\n" +
	"\vHealthCheck\x12\x1b.napster.HealthCheckRequest\x1a\x1c.napster.HealthCheckResponseB\x04Z\x02./b\x06proto3"

var (
	file_napster_proto_rawDescOnce sync.Once
	file_napster_proto_rawDescData []byte
)

func file_napster_proto_rawDescGZIP() []byte {
	file_napster_proto_rawDescOnce.Do(func() {
		file_napster_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_napster_proto_rawDesc), len(file_napster_proto_rawDesc)))
	})
	return file_napster_proto_rawDescData
}

var file_napster_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_napster_proto_goTypes = []any{
	(*RegisterRequest)(nil),     // 0: napster.RegisterRequest
	(*RegisterResponse)(nil),    // 1: napster.RegisterResponse
	(*SearchRequest)(nil),       // 2: napster.SearchRequest
	(*SearchResponse)(nil),      // 3: napster.SearchResponse
	(*HealthCheckRequest)(nil),  // 4: napster.HealthCheckRequest
	(*HealthCheckResponse)(nil), // 5: napster.HealthCheckResponse
	(*FileRequest)(nil),         // 6: napster.FileRequest
	(*FileResponse)(nil),        // 7: napster.FileResponse
}
var file_napster_proto_depIdxs = []int32{
	0, // 0: napster.CentralServer.RegisterPeer:input_type -> napster.RegisterRequest
	2, // 1: napster.CentralServer.SearchFile:input_type -> napster.SearchRequest
	4, // 2: napster.CentralServer.HealthCheck:input_type -> napster.HealthCheckRequest
	6, // 3: napster.PeerService.RequestFile:input_type -> napster.FileRequest
	4, // 4: napster.PeerService.HealthCheck:input_type -> napster.HealthCheckRequest
	1, // 5: napster.CentralServer.RegisterPeer:output_type -> napster.RegisterResponse
	3, // 6: napster.CentralServer.SearchFile:output_type -> napster.SearchResponse
	5, // 7: napster.CentralServer.HealthCheck:output_type -> napster.HealthCheckResponse
	7, // 8: napster.PeerService.RequestFile:output_type -> napster.FileResponse
	5, // 9: napster.PeerService.HealthCheck:output_type -> napster.HealthCheckResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_napster_proto_init() }
func file_napster_proto_init() {
	if File_napster_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_napster_proto_rawDesc), len(file_napster_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_napster_proto_goTypes,
		DependencyIndexes: file_napster_proto_depIdxs,
		MessageInfos:      file_napster_proto_msgTypes,
	}.Build()
	File_napster_proto = out.File
	file_napster_proto_goTypes = nil
	file_napster_proto_depIdxs = nil
}
