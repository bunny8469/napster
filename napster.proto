syntax = "proto3";

package napster;
option go_package = "./";

// Request message for sending a file chunk.
message FileChunk {
  string file_name = 1;
  string PeerAddress = 2;
  string albumArtist = 3;
  bytes chunk_data = 4;
}

// Response after a file is completely streamed.
message UploadResponse {
  int32 Status = 1;
  string torrent_file_name = 2;
  string message = 3;
  string renamed_file_name = 4;
}
service CentralServer {
    // rpc RegisterPeer(RegisterRequest) returns (RegisterResponse);
    rpc SearchFile(SearchRequest) returns (SearchResponse);
    // rpc GenerateTorrent(TorrentRequest) returns (TorrentResponse);
    rpc UploadFile(stream FileChunk) returns (UploadResponse);
    rpc GetTorrent(SearchRequest) returns (TorrentResponse);
    rpc EnableSeeding(SeedingRequest) returns (GenResponse);    
    
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
    rpc HealthCheckServer(HealthCheckRequest) returns (HealthCheckResponse);
}

service PeerService {
    rpc RequestChunk(ChunkRequest) returns (ChunkResponse);
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message SeedingRequest {
    string FileName = 1;
    string ClientAddr = 2;
}

message GenResponse {}

message ChunkRequest {
    string ChunkName = 1;
}

message ChunkResponse {
    int32 status = 1;
    bytes ChunkData = 2;
}

message RegisterRequest {
    string peer_id = 1;
    repeated string file_names = 2;
    string peer_address = 3;
    repeated string FilePaths = 4;
}

message RegisterResponse {
    bool success = 1;
    string message = 2;
    string RenamedFile = 3;
}

message SearchRequest {
    string query = 1;
    // string ChunkID = 2;
}

message SongInfo {
  string file_name = 1;
  string artist_name = 2;
  repeated string peer_addresses = 3;
  string created_at = 4;
  string duration = 5;
}

message SearchResponse {
  repeated SongInfo results = 1;
}
message HealthCheckRequest {}

message HealthCheckResponse {
    bool alive = 1;
}

message TorrentRequest {
    string file_path = 1;
}

message TorrentResponse {
    int32 Status = 1;
    string Filename = 2;
    bytes Content = 3;
}

// message TorrentMetadata {
//     string file_name = 1;
//     int64 file_size = 2;
//     int32 chunk_size = 3;
//     string checksum = 4;
//     map<int32, string> chunk_checksums = 5;
//     repeated string peers = 6;
//     string artist_name = 7;
//     string created_at = 8;
//     int64 duration = 9;
// }
